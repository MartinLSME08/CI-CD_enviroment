name: CI/CD API con notificaciones

on:
  pull_request:
    branches:
      - develop

env:
  AZURE_WEBAPP_NAME: APITest
  #AZURE_WEBAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    name: üîßBuild
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Restore
        run: dotnet restore APIWeb/APIWeb.sln

      - name: Build
        id: build-step
        run: dotnet build APIWeb/APIWeb.sln --configuration Release

      - name: Publish
        run: dotnet publish APIWeb/APIWeb.csproj -c Release -o ./publish --no-restore
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: publish
          path: ./publish

  notify-build-failure:
    name: ‚ùåNotificar fallo de build
    runs-on: ubuntu-latest
    needs: build
    if: always() #aseguro que se ejecute incluso si el build falla
    steps:
      - name: Notificar fallo de build
        if: needs.build.result == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PIPELINERESULTS }}
          SLACK_TITLE: "‚ùå Fallo de Build"
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            *Branch:* `${{ github.ref_name }}`
            *Autor:* `${{ github.actor }}`

  test:
    name: üß™Tests
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore packages
        run: dotnet restore APIWeb/APIWeb.sln

      - name: Run tests
        id: test-step
        run: dotnet test APIWeb/APIWeb.sln 

  notify-test-failure:
    name: ‚ùåNotificar fallo de tests
    runs-on: ubuntu-latest
    needs: test
    if: always() #aseguro que se ejecute incluso si los tests fallan
    steps:
      - name: Notificar fallo de tests
        if: needs.test.result == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PIPELINERESULTS }}
          SLACK_TITLE: "‚ùå Fallo en tests unitarios"
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            *Branch:* `${{ github.ref_name }}`
            *Autor:* `${{ github.actor }}`

  sonar-analysis:
    name: üîéAn√°lisis SonarCloud
    runs-on: ubuntu-latest
    needs: test
    env:
      SONAR_ORG: martinlsme08
      SONAR_PROJECT_KEY: MartinLSME08_CI-CD_enviroment
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore packages
        run: dotnet restore APIWeb/APIWeb.sln

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: SonarCloud - Begin Analysis
        run: dotnet-sonarscanner begin /k:"${{ env.SONAR_PROJECT_KEY }}" /o:"${{ env.SONAR_ORG }}" /d:sonar.login="${{ secrets.SONARCLOUD_ACCESSTOKEN }}" /d:sonar.coverage.exclusions="**/*"
      
      - name: Build for SonarCloud
        run: dotnet build APIWeb/APIWeb.sln --configuration Release --no-restore

      - name: SonarCloud - End Analysis
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONARCLOUD_ACCESSTOKEN }}"

  notify-sonar-link:
        name: üìé Notificar resultados de SonarCloud
        runs-on: ubuntu-latest
        needs: sonar-analysis
        steps:
          - name: Extraer link del an√°lisis desde los logs
            id: link
            run: |
              # Accedemos al √∫ltimo log del an√°lisis
              LOG_URL="https://sonarcloud.io/dashboard?id=MartinLSME08_CI-CD_enviroment&branch=${GITHUB_REF_NAME}&resolved=false"
              echo "url=$LOG_URL" >> $GITHUB_OUTPUT
          - name: Enviar link a Slack
            uses: rtCamp/action-slack-notify@v2
            env:
                SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PIPELINERESULTS }}
                SLACK_TITLE: "üîç SonarCloud Resultado"
                SLACK_COLOR: "#439FE0"
                SLACK_MESSAGE: |
                  *üîç Resultado de an√°lisis SonarCloud*
                  *Branch:* `${{ github.ref_name }}`
                  *Autor:* `${{ github.actor }}`
                  *Link:* <${{ steps.link.outputs.url }}|Ver an√°lisis en SonarCloud>

  deploy:
    name: üöÄDeploy a Azure
    runs-on: ubuntu-latest
    needs: [test]
    environment: Development
    if: ${{ needs.test.result == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: publish
          path: ./publish
      
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PROFILE }}
          package: ./publish

  notify-deploy-success:
    name: ‚úÖ Notificar deploy exitoso
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: Notificar deploy exitoso
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PIPELINERESULTS }}
          SLACK_TITLE: "‚úÖ Deploy exitoso"
          SLACK_COLOR: good
          SLACK_MESSAGE: |
            *Branch:* `${{ github.ref_name }}`
            *Autor:* `${{ github.actor }}`
            *Deploy URL:* <${{ secrets.AZURE_DEPLOY_DEVELOP }}|Ver aplicaci√≥n en Azure> 

