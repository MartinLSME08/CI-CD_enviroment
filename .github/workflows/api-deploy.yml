name: CI/CD API con notificaciones

on:
  push:

env:
  AZURE_WEBAPP_NAME: APITest
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    name: üîß Build
    runs-on: windows-latest
    outputs:
      build_status: ${{ steps.build-step.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore APIWeb/APIWeb.sln

      - name: Build
        id: build-step
        run: dotnet build APIWeb/APIWeb.sln --configuration Release

  notify-build-failure:
    name: ‚ùå Notificar fallo de build
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'failure'
    steps:
      - name: Notificar fallo de build
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PIPELINERESULTS }}
          SLACK_TITLE: "‚ùå Fallo de compilaci√≥n"
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            *üîß Build fallida*
            *Branch:* `${{ github.ref_name }}`
            *Autor:* `${{ github.actor }}`
            *Commit:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
            *Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver en GitHub>

  sonar-analysis:
    name: üîé An√°lisis SonarCloud
    runs-on: windows-latest
    needs: build
    env:
      SONAR_ORG: martinlsme08
      SONAR_PROJECT_KEY: MartinLSME08_CI-CD_enviroment
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore packages
        run: dotnet restore APIWeb/APIWeb.sln

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: SonarCloud - Begin Analysis
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /o:"${{ env.SONAR_ORG }}" \
            /d:sonar.login="${{ secrets.SONARCLOUD_ACCESSTOKEN }}"

      - name: Build for SonarCloud
        run: dotnet build APIWeb/APIWeb.sln --configuration Release

      - name: SonarCloud - End Analysis
        run: dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONARCLOUD_ACCESSTOKEN }}"

  test:
    name: üß™ Tests unitarios
    runs-on: windows-latest
    needs: build
    if: needs.build.result == 'success'
    outputs:
      test_status: ${{ steps.test-step.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore APIWeb/APIWeb.sln

      - name: Run tests
        id: test-step
        run: dotnet test APIWeb/APIWeb.sln --logger "console;verbosity=normal"

  notify-test-failure:
    name: ‚ùå Notificar fallo de tests
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'failure'
    steps:
      - name: Notificar fallo de tests
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PIPELINERESULTS }}
          SLACK_TITLE: "‚ùå Fallo en tests unitarios"
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            *üß™ Tests fallidos*
            *Branch:* `${{ github.ref_name }}`
            *Autor:* `${{ github.actor }}`
            *Commit:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
            *Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver en GitHub>

  deploy:
    name: üöÄ Deploy a Azure
    runs-on: windows-latest
    needs: test
    if: needs.test.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Publish
        run: dotnet publish APIWeb/APIWeb.csproj -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp

  notify-deploy-success:
    name: ‚úÖ Notificar deploy exitoso
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: Notificar deploy exitoso
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PIPELINERESULTS }}
          SLACK_TITLE: "‚úÖ Deploy exitoso"
          SLACK_COLOR: good
          SLACK_MESSAGE: |
            *üöÄ Deploy realizado correctamente*
            *Branch:* `${{ github.ref_name }}`
            *Autor:* `${{ github.actor }}`
            *Commit:* <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>
            *Run:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Ver en GitHub>

